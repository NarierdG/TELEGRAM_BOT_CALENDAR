import time
import telebot
from telebot import types
import os
import sqlite3 as sl
import threading
from datetime import datetime


# —É–∑–Ω–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å main –∏ –æ–±—Ä–µ–∑–∞–µ–º –æ—Ç main.py
path = os.path.realpath('main.py')
path = path.replace('main.py', '')

# –∑–∞–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
with open(path + "token.pkl", "r") as f:
    token = f.read()
bot = telebot.TeleBot(str(token))


def create_table():
    connection = sl.connect(path + "MyBase.db")
    with connection:
        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü —Å –Ω—É–∂–Ω—ã–º –Ω–∞–º –∏–º–µ–Ω–µ–º
        data = connection.execute("select count(*) from sqlite_master where type='table' and name='reminder'")
        for row in data:
            # –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç
            if row[0] == 0:
                # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
                with connection:
                    connection.execute("""
                            CREATE TABLE reminder (
                            id INTEGER AUTO_INCREMENT PRIMARY KEY,
                            chat_id INTEGER,
                            human VARCHAR(40),
                            time VARCHAR(16),
                            time_bot_day VARCHAR(16),
                            time_bot_min VARCHAR(16),
                            reminder_time INTEGER,
                            commits VARCHAR(100)
                        );
                    """)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start'])
def start(message):
    create_table()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìí")
    btn2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìá")
    btn3 = types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞–Ω—ã üìÉ")
    btn4 = types.KeyboardButton("–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìö")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –í–∞–º –æ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ. ü§î".format(
                         message.from_user), reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=['text'])
def main_func(message):
    if (message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìí"): addreminder(message)
    elif (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìá"): changereminder(message)
    elif (message.text == "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞–Ω—ã üìÉ"): todaysplans(message)
    elif (message.text == "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìö"): allplans(message)
    else:
        bot.send_message(message.chat.id, text="–¢–∞–∫–æ–º—É –º–µ–Ω—è –µ—â–µ –Ω–µ —É—á–∏–ª–∏..")


def addreminder(message):
    connection = sl.connect(path + "MyBase.db")
    # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    sql = ('INSERT INTO reminder (chat_id, human, time, time_bot_day, time_bot_min, '
           'reminder_time, commits) values(?, ?, ?, ?, ?, ?, ?)')
    data = []
    bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH:MM:SS")
    if (len(message.text) != 16 or datetime.strptime(message.text, "%Y-%m-%d %H:%M:%S") == False):
        bot.send_message(message.chat.id, text="–Ø –¥—É–º–∞—é, —á—Ç–æ –í—ã, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ —Å–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. ü§î")
        bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —è—Å–Ω–æ—Å—Ç—å, –ø–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞—Ç—å "
                                               "—Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")
        start(message)
        return
    data.append = str(message.text)
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
    with connection:
        connection.executemany(sql, tuple(data))


def changereminder(message):
    bot.send_message(message.chat.id, text="todaysplans")

def todaysplans(message):
    bot.send_message(message.chat.id, text="todaysplans")

def allplans(message):
    bot.send_message(message.chat.id, text="todaysplans")


def update_database():
    while (True):
        connection = sl.connect(path + "MyBase.db")
        data = connection.execute("SELECT * FROM reminder")
        for row in data:
            current_date = datetime.now()
            date_now = current_date.replace(second=0, microsecond=0)
            # —Å–≤–µ—Ä—è–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º
            if (row[4] == date_now):
                bot.send_message(chat_id=data[1], text=f'–ü—Ä–∏–≤–µ—Ç, {data[2]}, –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞: {data[3]} '
                                                       f' —É —Ç–µ–±—è –∑–∞–ø–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ: {data[7]}')
            if (row[5] == date_now):
                bot.send_message(chat_id=data[1], text=f'–ü—Ä–∏–≤–µ—Ç, {data[2]}, –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ  {data[3]} '
                                                       f' –£ —Ç–µ–±—è –∑–∞–ø–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ: {data[7]}')
        time.sleep(50)


# —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
thread = threading.Thread(target=update_database)
thread.start()

# –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π polling –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)